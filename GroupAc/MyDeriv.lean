import Mathlib
import Mathlib.Data.Set.Defs
import Mathlib.Data.Set.Basic

variable {f}

def RestrictsToPoly (f: ‚Ñù ‚Üí ‚Ñù) (a b: ‚Ñù) :=
  ‚àÉ (p: Polynomial ‚Ñù), ‚àÄ (y: ‚Ñù), y ‚àà Set.Icc a b ‚Üí f y = p.eval y

lemma poly_n_induct (n k: ‚Ñï) (p: Polynomial ‚Ñù) (hp1: ((Polynomial.derivative)^[n] p).degree < k) : (p.degree < n + k) := by
  induction n generalizing k with
  | zero =>
    simp at hp1
    simp
    exact hp1
  | succ a ha =>
    rw [Function.iterate_succ'] at hp1
    simp at hp1

    have partial_lt: (Polynomial.derivative ((Polynomial.derivative)^[a] p)).degree ‚â§ ((‚áëPolynomial.derivative)^[a] p).degree := by
      apply Polynomial.degree_derivative_le

    have h2: (Polynomial.derivative ((‚áëPolynomial.derivative)^[a] p)).degree < k := by
      sorry
      --apply lt_of_le_of_lt' partial_lt (ha 1)
    sorry

lemma zero_deriv_implies_poly (a b : ‚Ñù) (n: ‚Ñï) (hf: ‚àÄ (x : ‚Ñù), (x ‚àà Set.Ioo a b) ‚Üí (iteratedDerivWithin n f (Set.Ioo a b)) x = 0): RestrictsToPoly f a b := by
  let temp_f: Set.Ioo a b ‚Üí ‚Ñù := Œª z => (iteratedDerivWithin n f (Set.Ioo a b)) z
  have temp_f_zero: temp_f = Œª x => 0 := by
    simp only [temp_f]
    apply funext
    intro x
    apply hf x
    simp

  have temp_f_zero_poly: temp_f = Œª x: Set.Ioo a b => Polynomial.eval ‚Üëx 0 := by
    apply funext
    intro x
    rw [temp_f_zero]
    simp [Polynomial.eval_zero]

  sorry



-- https://mathoverflow.net/questions/34059/if-f-is-infinitely-differentiable-then-f-coincides-with-a-polynomial
theorem infinite_zero_is_poly (hf: ‚àÄ (x : ‚Ñù), ‚àÉ (n: ‚Ñï), (iteratedDeriv n f) x = 0) (hCInfinity: ContDiff ‚Ñù ‚ä§ f): RestrictsToPoly f 0 1 := by
  -- let real_powset := ùí´ { z: ‚Ñù | True }
  let poly_omega := Set.sUnion { i | ‚àÉ (a b : ‚Ñù ), i = Set.Ioo a b ‚àß RestrictsToPoly f a b }
  have poly_open: IsOpen poly_omega := by
    apply isOpen_sUnion
    intro t ht
    simp at ht
    obtain ‚ü®a, b, h, h'‚ü© := ht
    rw [h]
    apply isOpen_Ioo

  obtain ‚ü®poly_intervals, hIntervals‚ü© := TopologicalSpace.IsTopologicalBasis.open_eq_sUnion Real.isTopologicalBasis_Ioo_rat poly_open
  have _: poly_intervals.Countable := by
    sorry

  have poly_full: poly_intervals = ‚Ñù := by
    sorry

  have unique_diff: ‚àÄ (x c d: ‚Ñù), x ‚àà Set.Ioo c d ‚Üí UniqueDiffWithinAt ‚Ñù (Set.Ioo c d) x := by
    exact fun x c d a ‚Ü¶ uniqueDiffWithinAt_Ioo a

  let e_n := fun k => { x: ‚Ñù | (iteratedDeriv k f) x = 0 }
  have en_closed: ‚àÄ k: ‚Ñï, IsClosed (e_n k) := by
    intro k
    simp only [e_n]
    --have closed_zero: IsClosed { @Set.Icc _ _ 0 0 } := sorry
    simp [‚Üê Set.mem_singleton_iff]
    rw [‚Üê Set.preimage]
    apply IsClosed.preimage
    apply ContDiff.continuous_iteratedDeriv k hCInfinity _
    exact OrderTop.le_top _
    exact isClosed_singleton


  have nonempty_closed_interval: ‚àÄ a b : ‚Ñù, a < b ‚Üí ((Set.Icc a b) ‚à© poly_omega).Nonempty := by
    intro a b a_lt_b
    have en_intersect_closed: ‚àÄ k: ‚Ñï , @IsClosed (Set.Icc a b) _ ((Set.Icc a b) ‚à© (e_n k)) := by
      intro k
      apply IsClosed.inter
      apply isClosed_Icc
      apply en_closed k

    have en_covers: (Set.Icc a b) = Set.iUnion fun j => ((e_n j) ‚à© Set.Icc a b) := by
      ext p
      obtain ‚ü®n, hn‚ü© := hf p
      have p_in_en: p ‚àà (e_n n) := by
        simp only [e_n]
        simp
        exact hn


      --have p_implies_in_en: fun h_new => (p ‚àà (e_n n) (e_n n) ‚à© Set.Icc a b) := by
      --  simp only [e_n]
      --  apply And.intro p_in_en h_new

      constructor
      -- first case
      intro p_in_interval
      have p_in_intersect: p ‚àà (e_n n) ‚à© Set.Icc a b := by
        apply Set.mem_inter
        exact p_in_en
        exact p_in_interval

      simp only [Set.mem_iUnion]
      exact ‚ü®n, p_in_intersect‚ü©
      -- second case

      simp

    have nonempty: (Set.Icc a b).Nonempty := by
      rw [Set.nonempty_Icc]
      linarith

    have real_nonempty: Nonempty (Set.Icc a b) := by
      rw [Set.nonempty_iff_ne_empty']
      exact Set.nonempty_iff_ne_empty.mp nonempty


    obtain ‚ü®interior_index, int_nonempty‚ü© := @nonempty_interior_of_iUnion_of_closed (Set.Icc a b) _ _ _ _ _ _ en_intersect_closed en_covers
    have int_open: IsOpen (interior (Set.Icc a b ‚à© e_n interior_index)) := by apply isOpen_interior
    obtain ‚ü®c, d, c_lt_d, cd_int‚ü© := IsOpen.exists_Ioo_subset int_open int_nonempty
    have zero_on_cd: ‚àÄ (x: ‚Ñù), x ‚àà (Set.Ioo c d) ‚Üí (iteratedDerivWithin interior_index f (Set.Ioo c d)) x = 0 := by sorry
    have poly_on_cd: RestrictsToPoly f c d := by apply zero_deriv_implies_poly c d interior_index zero_on_cd
    have cd_subset_omega: Set.Ioo c d ‚äÜ poly_omega := by
      simp [poly_omega]
      rw [Set.subset_def]
      intro x hx
      simp only [Set.mem_sUnion]
      use Set.Ioo c d
      simp
      constructor
      exact ‚ü®c, d, rfl, poly_on_cd‚ü©
      exact hx

    have cd_subset_ab: Set.Ioo c d ‚äÜ Set.Icc a b := by
      simp at cd_int
      have cd_subset: (Set.Ioo c d) ‚äÜ Set.Ioo a b := by exact cd_int.1
      have io_lt: Set.Ioo a b ‚äÜ Set.Icc a b := Set.Ioo_subset_Icc_self
      apply subset_trans cd_subset io_lt

    have cd_subet_omega_ab: Set.Ioo c d ‚äÜ poly_omega ‚à© Set.Icc a b := by
      apply Set.subset_inter
      exact cd_subset_omega
      exact cd_subset_ab

    sorry


  let X := poly_omega·∂ú
  have X_closed: IsClosed X := IsOpen.isClosed_compl poly_open
  have X_empty: X = ‚àÖ := by
    have x_accum: ‚àÄ x, x ‚àà X ‚Üí AccPt x (Filter.principal X) := by
      by_contra!
      obtain ‚ü®x, ‚ü®x_in, x_not_acc‚ü©‚ü© := this
      rw [accPt_iff_nhds] at x_not_acc
      simp at x_not_acc
      obtain ‚ü®u, hu‚ü© := x_not_acc
      rw [nhds_def] at hu

      have g : ‚Ñù := by sorry
      have g_lt_x: g < x := by sorry
      have h : ‚Ñù := by sorry
      have x_lt_h: x < h := by sorry

      -- TODO - get this intervals from the fact that x is an isolated point
      have _: (Set.Ioo g x) ‚äÜ poly_omega := by sorry
      have _: (Set.Ioo x h) ‚äÜ poly_omega := by sorry

      have is_first_poly: RestrictsToPoly f g x := by sorry
      have is_second_poly: RestrictsToPoly f x h := by sorry

      obtain ‚ü®first_poly, h_first_poly‚ü© := is_first_poly
      obtain ‚ü®second_poly, h_second_poly‚ü© := is_second_poly

      let n := max first_poly.natDegree second_poly.natDegree
      have zero_on_new: ‚àÄ (y: ‚Ñù), y ‚àà (Set.Ioo g x ‚à™ Set.Ioo x h) ‚Üí (iteratedDerivWithin n f (Set.Ioo g x ‚à™ Set.Ioo x h)) y = 0 := by
        have degree_zero: ((‚áëPolynomial.derivative)^[n] first_poly).natDegree ‚â§ first_poly.natDegree - n := by
          apply Polynomial.natDegree_iterate_derivative first_poly n
        simp at degree_zero
        have first_le_n : first_poly.natDegree ‚â§ n := by exact Nat.le_max_left first_poly.natDegree second_poly.natDegree
        have real_degree_zero: ((‚áëPolynomial.derivative)^[n] first_poly).natDegree ‚â§ 0 := by sorry

        have first_zero: ((‚áëPolynomial.derivative)^[n] first_poly) = 0 := by sorry
        have second_zero: ((‚áëPolynomial.derivative)^[n] second_poly) = 0 := by sorry

        have f_deriv_zero: ‚àÄ (y: ‚Ñù), y ‚àà (Set.Ioo g x ‚à™ Set.Ioo x h) ‚Üí (iteratedDerivWithin n f (Set.Ioo g x ‚à™ Set.Ioo x h)) y = 0 := by
          sorry

        -- Use continuity here
        have f_deriv_at_x: (iteratedDerivWithin n f (Set.Ioo g h)) x = 0 := sorry
        -- f^(n) is zero on (g, x) and (x, h), and x, so it's zero on (g, h)
        have f_zero_full: ‚àÄ (y: ‚Ñù), y ‚àà (Set.Ioo g h) ‚Üí (iteratedDerivWithin n f (Set.Ioo g h)) y = 0 := sorry
        sorry

      have f_poly_full: RestrictsToPoly f g h := by sorry
      have gh_in_omega: Set.Ioo g h ‚äÜ poly_omega := by
        simp [poly_omega]
        rw [Set.subset_def]
        intro y hy
        simp only [Set.mem_sUnion]
        use Set.Ioo g h
        simp
        constructor
        exact ‚ü®g, h, rfl, f_poly_full‚ü©
        exact hy

      have x_in_gh: x ‚àà Set.Ioo g h := by
        simp
        exact ‚ü®g_lt_x, x_lt_h‚ü©

      have x_in_omega: x ‚àà poly_omega := by
        apply gh_in_omega
        exact x_in_gh
      contradiction

    have x_intersect_closed: ‚àÄ k: ‚Ñï , IsClosed (X ‚à© (e_n k)) := by
      intro k
      apply IsClosed.inter
      exact X_closed
      apply en_closed k

    have x_union_en: X = Set.iUnion fun j => X ‚à© (e_n j) := by
      ext p
      obtain ‚ü®n, hn‚ü© := hf p
      have p_in_en: p ‚àà (e_n n) := by
        simp only [e_n]
        simp
        exact hn

      constructor
      intro p_in_x
      have p_in_intersect: p ‚àà X ‚à© (e_n n):= by
        apply Set.mem_inter
        exact p_in_x
        exact p_in_en

      simp only [Set.mem_iUnion]
      exact ‚ü®n, p_in_intersect‚ü©
      -- second case
      intro p_in_union
      simp only [Set.mem_iUnion] at p_in_union
      obtain ‚ü®_, p_in_intersect‚ü© := p_in_union
      exact p_in_intersect.1

    have en_cov_univ_set_x: (Set.iUnion fun j => X ‚à© (e_n j)) = Set.univ := by
      sorry

    by_contra!

    rw [eq_comm] at x_union_en
    obtain ‚ü®n_x_int, x_int_nonempty‚ü© := nonempty_interior_of_iUnion_of_closed x_intersect_closed en_cov_univ_set_x
    let x_int := (interior (X ‚à© e_n n_x_int))
    have x_int_open: IsOpen x_int := by apply isOpen_interior
    obtain ‚ü®c, d, c_lt_d, cd_int‚ü© := IsOpen.exists_Ioo_subset x_int_open x_int_nonempty
    have x_zero_on_cd: ‚àÄ (x: ‚Ñù), x ‚àà Set.Ioo c d ‚Üí (iteratedDerivWithin n_x_int f (Set.Ioo c d)) x = 0 :=
      by sorry

    have n_succ_deriv_zero: ‚àÄ (x: ‚Ñù), x ‚àà Set.Ioo c d ‚Üí (iteratedDerivWithin (n_x_int + 1) f (Set.Ioo c d)) x = 0 := by
      intro x hx
      have unique_diff_at : UniqueDiffWithinAt ‚Ñù (Set.Ioo c d) x := by
        apply unique_diff x
        assumption
      rw [iteratedDerivWithin_succ unique_diff_at]

      have deriv_within: HasDerivWithinAt (iteratedDerivWithin n_x_int f (Set.Ioo c d)) 0 (Set.Ioo c d) x := by
        --rw [hasDerivWithinAt_iff_tendsto_slope]
        sorry
      apply HasDerivWithinAt.derivWithin deriv_within
      sorry

    have forall_deriv_zero: ‚àÄ (m: ‚Ñï), m ‚â• n_x_int ‚Üí  ‚àÄ (x: ‚Ñù), x ‚àà X ‚à© Set.Ioo c d ‚Üí (iteratedDerivWithin m f (Set.Ioo c d)) x = 0 := by
      intro m hm
      induction m with
      | zero => sorry
      | succ a ha => sorry

    have deriv_zero_on_cd_omega: ‚àÄ (x : ‚Ñù), x ‚àà Set.Ioo c d ‚Üí (iteratedDerivWithin n_x_int f (Set.Ioo c d)) x = 0 := by
      sorry

    have poly_on_cd: RestrictsToPoly f c d := by apply zero_deriv_implies_poly c d n_x_int deriv_zero_on_cd_omega
    have cd_subset_omega: Set.Ioo c d ‚äÜ poly_omega := by
      simp [poly_omega]
      rw [Set.subset_def]
      intro x hx
      simp only [Set.mem_sUnion]
      use Set.Ioo c d
      simp
      constructor
      exact ‚ü®c, d, rfl, poly_on_cd‚ü©
      exact hx
    have int_subset_x_int: x_int ‚äÜ X ‚à© e_n n_x_int := interior_subset
    have int_subset_x: x_int ‚äÜ X := by sorry
    have cd_subset_x: Set.Ioo c d ‚äÜ X := by sorry
    simp [X] at cd_subset_x

    -- TODO - obtain this from our subsets above
    have q: ‚Ñù := sorry
    have _: q ‚àà X := by sorry
    have _: q ‚àâ X := by sorry

    contradiction

  have poly_comp_empty: poly_omega·∂ú = ‚àÖ := by
    apply X_empty
  have poly_full: poly_omega = (Set.univ) := by
    exact Set.compl_empty_iff.mp X_empty

  sorry

    --apply is_closed_iff_forall_subset_is_closed.mp (en_closed k)
    --apply Set.Icc_subset_Icc
